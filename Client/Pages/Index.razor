@page "/"
@using System.Threading
@using System.Collections.Generic
@using Microsoft.AspNetCore.SignalR.Client
@using LearnBlazor.Shared.DataTransferObject
@using LearnBlazor.Shared.Communication
@using LearnBlazor.Shared
@inject HttpClient Http
@inject NavigationManager NavigationManager
@implements IAsyncDisposable



<hr>

<div class="form-group">
    <select @bind="_userUuid">
        @foreach (var user in _users)
        {
            <option value=@user.Uuid>@user.Name; @user.Uuid</option>
        }
    </select>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>

<ul id="chatGroupsList">
    @foreach (var chatGroup in _chatGroups)
    {
    <li>
        <h1>Chat Group: @chatGroup.ChatGroupName</h1>
        <h1>Users: </h1>
        
        <button @onclick="(() => Send(chatGroup.Uuid))" disabled="@(!IsConnected)">Send</button>

        <ul class="messagesList">
            @foreach (var message in _messages)
            {
                @if (message.ChatGroupUuid.Equals(chatGroup.Uuid))
                {
                    <li>@message.UserName: @message.Message</li>
                }
            }
        </ul>
    </li>
    }
</ul>

@code {
    private HubConnection hubConnection;
    private List<ChatMessageDTO> _messages = new List<ChatMessageDTO>();
    private List<ChatGroupDTO> _chatGroups = new List<ChatGroupDTO>();
    private List<UserDTO> _users = new List<UserDTO>();
    private string userInput;
    private string messageInput;
    private string _userUuid;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        _chatGroups = await Http.GetFromJsonAsync<List<ChatGroupDTO>>("/api/ChatGroup");
        _users = await Http.GetFromJsonAsync<List<UserDTO>>("/api/User");
        foreach (ChatGroupDTO chatGroup in _chatGroups)
        {
            // TODO do in parallel
            IEnumerable<ChatMessageDTO> messages = await Http.GetFromJsonAsync<ChatMessageDTO[]>($"/api/ChatMessage/{chatGroup.Uuid}");
            _messages.AddRange(messages);
        }

        hubConnection.On<ChatMessageResponse>("ReceiveMessage", (ChatMessageResponse chatMessageRes) =>
        {
            if (!chatMessageRes.Success)
            {
                //TODO
                Console.WriteLine(chatMessageRes.Message);
            }
            else
            {
                ChatMessageDTO chatMessage = chatMessageRes.ChatMessageDTO;
                if (chatMessage != null)
                {
                    _messages.Add(chatMessage);
                    StateHasChanged();
                }
            }
        });

        //hubConnection.On<string>("WelcomeMessage", (string welcomeChat) =>
        //{
        //    messages.Add(welcomeChat);
        //    StateHasChanged();
        //});

        await hubConnection.StartAsync();
    }

    public async Task Send(Guid chatGroupUuid)
    {
        bool parseSuccess = Guid.TryParse(_userUuid, out Guid userUuid);
        if (parseSuccess)
        {
            ChatMessageDTO chatMessage = new ChatMessageDTO
            {
                UserUuid = userUuid,
                ChatGroupUuid = chatGroupUuid,
                Message = messageInput
            };
            await hubConnection.SendAsync("CreateMessage", chatMessage);
        }
        else
        {
            //TODO
        }

    }

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }
}