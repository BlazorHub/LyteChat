@page "/"
@using System.Threading
@using System.Collections.Generic
@using Microsoft.AspNetCore.SignalR.Client
@using LearnBlazor.Shared.DataTransferObject
@using LearnBlazor.Shared.Communication
@using LearnBlazor.Shared
@using LearnBlazor.Client; 
@inject StateContainer StateContainer
@inject HttpClient Http
@inject NavigationManager NavigationManager
@implements IAsyncDisposable



<hr>


<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>

<ul id="chatGroupsList">
    @foreach (KeyValuePair<Guid, ChatGroupData> kv in StateContainer.ChatGroupsForUser)
    {
        <li>
            <h2>Chat Group: @kv.Value.ChatGroup.ChatGroupName</h2>
            <h3>Users: </h3>
            <ul class="messagesList">
                @foreach (var userUuid in kv.Value.Users)
                {
                    {
                        <li>@StateContainer.AllUsers[userUuid].Name</li>
                    }
                }
            </ul>

            <button @onclick="(() => Send(kv.Value.ChatGroup.Uuid))" disabled="@(!IsConnected)">Send</button>
            <h3>Messages: </h3>
            <ul class="messagesList">
                @foreach (var message in kv.Value.Messages)
                {
                    {
                        <li>@message.UserName: @message.Message</li>
                    }
                }
            </ul>
        </li>
    }
</ul>

@code {
    private HubConnection hubConnection;
    private string userInput;
    private string messageInput;

    protected override async Task OnInitializedAsync()
    {
        StateContainer.OnChange += StateHasChanged;

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<ChatMessageResponse>("ReceiveMessage", (ChatMessageResponse chatMessageRes) =>
        {
            if (!chatMessageRes.Success)
            {
                //TODO
                Console.WriteLine(chatMessageRes.Message);
            }
            else
            {
                ChatMessageDTO chatMessage = chatMessageRes.ChatMessageDTO;
                if (chatMessage != null)
                {
                    StateContainer.ChatGroupsForUser[chatMessage.ChatGroupUuid].Messages.Add(chatMessage);
                    StateHasChanged();
                }
            }
        });

        //hubConnection.On<string>("WelcomeMessage", (string welcomeChat) =>
        //{
        //    messages.Add(welcomeChat);
        //    StateHasChanged();
        //});

        await hubConnection.StartAsync();
    }

    public async Task Send(Guid chatGroupUuid)
    {
        ChatMessageDTO chatMessage = new ChatMessageDTO
        {
            UserUuid = StateContainer.CurrentUser.Uuid,
            ChatGroupUuid = chatGroupUuid,
            Message = messageInput
        };
        await hubConnection.SendAsync("CreateMessage", chatMessage);
    }

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        StateContainer.OnChange -= StateHasChanged;
        await hubConnection.DisposeAsync();
    }
}