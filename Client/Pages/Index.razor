@page "/"
@using System.Threading
@using System.Collections.Generic
@using Microsoft.AspNetCore.SignalR.Client
@using LearnBlazor.Shared.DataTransferObject
@using LearnBlazor.Shared.Communication
@using LearnBlazor.Shared
@inject HttpClient Http
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<div class="form-group">
    <label>
        User:
        <input @bind="userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>

<hr>

<ul id="chatGroupsList">
    @foreach (var chatGroup in _chatGroups)
    {
    <li>
        <h1>@chatGroup.ChatGroupName</h1>
        <ul class="messagesList">
            @foreach (var message in _messages)
            {
                @if (message.ChatGroupUuid.Equals(chatGroup.Uuid))
                {
                    <li>@message.UserName: @message.Message</li>
                }
            }
        </ul>
    </li>
    }
</ul>

@code {
    private HubConnection hubConnection;
    private List<ChatMessageDTO> _messages = new List<ChatMessageDTO>();
    private List<ChatGroupDTO> _chatGroups = new List<ChatGroupDTO>();
    private string userInput;
    private string messageInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        _chatGroups = await Http.GetFromJsonAsync<List<ChatGroupDTO>>("/api/ChatGroup");
        foreach (ChatGroupDTO chatGroup in _chatGroups)
        {
            IEnumerable<ChatMessageDTO> messages = await Http.GetFromJsonAsync<ChatMessageDTO[]>($"/api/ChatMessage/{chatGroup.Uuid}");
            _messages.AddRange(messages);
        }

        hubConnection.On<ChatMessageResponse>("ReceiveMessage", (ChatMessageResponse chatMessageRes) =>
        {
            if (!chatMessageRes.Success)
            {
                //TODO
            }
            ChatMessageDTO chatMessage = chatMessageRes.ChatMessageDTO;
            if (chatMessage != null)
            {
                _messages.Append(chatMessage);
                StateHasChanged();
            }
        });

        //hubConnection.On<string>("WelcomeMessage", (string welcomeChat) =>
        //{
        //    messages.Add(welcomeChat);
        //    StateHasChanged();
        //});

        await hubConnection.StartAsync();
    }

    public async Task Send()
    {
        ChatMessageDTO chatMessage = new ChatMessageDTO
        {
            //UserUuid =
            Message = messageInput
        };
        await hubConnection.SendAsync("CreateMessage", chatMessage);
    }

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }
}