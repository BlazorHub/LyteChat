@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using LearnBlazor.Shared.DataTransferObject;
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<div class="form-group">
    <label>
        User:
        <input @bind="userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message.UserName: @message.Message</li>
    }
</ul>

@code {
    private HubConnection hubConnection;
    private List<ChatMessageDTO> messages = new List<ChatMessageDTO>();
    private string userInput;
    private string messageInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<ChatMessageDTO>("ReceiveMessage", (ChatMessageDTO chatMessage) =>
        {
            messages.Add(chatMessage);
            StateHasChanged();
        });

        hubConnection.On<IEnumerable<ChatMessageDTO>>("GetMessagesForGroup", (IEnumerable<ChatMessageDTO> messagesRes) =>
        {
            foreach (ChatMessageDTO message in messagesRes)
            {
                messages.Add(message);
            }

            StateHasChanged();
        });

        //hubConnection.On<string>("WelcomeMessage", (string welcomeChat) =>
        //{
        //    messages.Add(welcomeChat);
        //    StateHasChanged();
        //});

        await hubConnection.StartAsync();
    }

    public async Task Send()
    {
        ChatMessageDTO chatMessage = new ChatMessageDTO
        {
            //UserUuid =
            Message = messageInput
        };
        await hubConnection.SendAsync("CreateMessage", chatMessage);
    }

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }
}