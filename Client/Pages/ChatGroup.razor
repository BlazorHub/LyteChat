@page "/chatgroup/{chatGroupUuidStr}"
@using System.Threading
@using Microsoft.AspNetCore.Components
@using System.Collections.Generic
@using Microsoft.AspNetCore.SignalR.Client
@using System.Net.Http.Headers;
@using LyteChat.Shared.DataTransferObject
@using LyteChat.Shared.Communication
@using LyteChat.Shared
@using LyteChat.Client;
@inject StateContainer StateContainer
@inject HttpClient Http
@inject JWTAuthenticationStateProvider TokenProvider
@implements IDisposable

<div class="container-fluid">
    <div class="card bg-light mb-3">


        @if (ChatGroupDataExists())
        {
            ChatGroupData ChatGroupData = StateContainer.ChatGroupsForUser[ChatGroupUuid];
            <h1 class="card-header text-center">@ChatGroupData.ChatGroup.ChatGroupName</h1>
            <div class="card-body">
                <h3>Users </h3>
                <ul class="list-group list-group-horizontal-sm">
                    @foreach (Guid userUuid in ChatGroupData.Users)
                    {
                        if (StateContainer.KnownUsers.ContainsKey(userUuid))
                        {
                            <li class="list-group-item">@StateContainer.KnownUsers[userUuid].Name</li>
                        }
                    }
                </ul>

                <EditForm @ref="createchatmessageform" Model="CreateChatMessage" OnValidSubmit="Send">
                    <div class="form-group">
                        <label>Email address</label>
                        <InputText class="form-control" @bind-Value="CreateChatMessage.MessageInput" />
                        <ValidationMessage For="@(()=> CreateChatMessage.MessageInput)" />
                    </div>

                    <button disabled="@(cannotSendMessage)" type="submit" class="btn btn-outline-primary btn-sm">Send Message</button>
                </EditForm>

                <h3>Messages: </h3>
                <ul class="list-group">
                    @foreach (var message in ChatGroupData.Messages)
                    {
                        {
                            <li class="list-group-item">@message.CreatedOn | @message.UserName: @message.Message</li>
                        }
                    }
                </ul>
            </div>
        }
        else
        {
        <h2>Chat Group: @ChatGroupUuidStr does not exist or you are not authorized for this group</h2>
        }
            
        </div>
</div>
        


@code {
    private class CreateMessageModel
    {
        public string MessageInput = "";
    }

    [Parameter]
    public string ChatGroupUuidStr { get; set; }
    private Guid ChatGroupUuid { get; set; }

    private EditForm createchatmessageform { get; set; }
    private CreateMessageModel CreateChatMessage = new CreateMessageModel();
    private bool cannotSendMessage => !(StateContainer.IsConnected && CreateChatMessage.MessageInput.Length != 0);

    protected override void OnParametersSet()
    {
        StateContainer.OnChange += StateHasChanged;
        bool parseSuccess = Guid.TryParse(ChatGroupUuidStr, out Guid chatGroupUuid);
        ChatGroupUuid = chatGroupUuid;
    }

    private bool ChatGroupDataExists()
    {
        return StateContainer.ChatGroupsForUser.ContainsKey(ChatGroupUuid);
    }

    private async Task Send()
    {
        ChatMessageDTO chatMessage = new ChatMessageDTO
        {
            UserUuid = StateContainer.CurrentUser.Uuid,
            ChatGroupUuid = ChatGroupUuid,
            Message = CreateChatMessage.MessageInput
        };
        await StateContainer.SendMessage(chatMessage);
        CreateChatMessage.MessageInput = "";
    }

    public void Dispose()
    {
        StateContainer.OnChange -= StateHasChanged;
    }
}
