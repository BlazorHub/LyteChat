@page "/chatgroup/{chatGroupUuidStr}"
@using System.Threading
@using Microsoft.AspNetCore.Components
@using System.Collections.Generic
@using Microsoft.AspNetCore.SignalR.Client
@using System.Net.Http.Headers;
@using LyteChat.Shared.DataTransferObject
@using LyteChat.Shared.Communication
@using LyteChat.Shared
@using LyteChat.Client;
@inject StateContainer StateContainer
@inject HttpClient Http
@inject JWTAuthenticationStateProvider TokenProvider
@implements IDisposable


@if (ChatGroupDataExists())
{
    ChatGroupData ChatGroupData = StateContainer.ChatGroupsForUser[ChatGroupUuid];
    <h2>Chat Group Name: @ChatGroupData.ChatGroup.ChatGroupName</h2>
    <h3>Users: </h3>
    <ul class="messagesList">
        @foreach (Guid userUuid in ChatGroupData.Users)
        {
            if (StateContainer.KnownUsers.ContainsKey(userUuid))
            {
                <li>@StateContainer.KnownUsers[userUuid].Name</li>
            }
        }
    </ul>

    <div class="form-group">
        <label>
            Message:
            <input @bind="messageInput" size="50" />
        </label>
    </div>

    <button @onclick="(() => Send(ChatGroupData.ChatGroup.Uuid))" disabled="@(cannotSendMessage)">Send</button>
    <h3>Messages: </h3>
    <ul class="messagesList">
        @foreach (var message in ChatGroupData.Messages)
        {
            {
                <li>@message.CreatedOn | @message.UserName: @message.Message</li>
            }
        }
    </ul>

    <hr>

}
else
{
    <h2>Chat Group: @ChatGroupUuidStr does not exist or you are not authorized for this group</h2>
}


@code {
    [Parameter]
    public string ChatGroupUuidStr { get; set; }
    private Guid ChatGroupUuid { get; set; }

    private string messageInput = "";
    private bool cannotSendMessage => !(StateContainer.IsConnected && messageInput.Length != 0);

    protected override void OnParametersSet()
    {
        StateContainer.OnChange += StateHasChanged;
        bool parseSuccess = Guid.TryParse(ChatGroupUuidStr, out Guid chatGroupUuid);
        ChatGroupUuid = chatGroupUuid;
    }

    private bool ChatGroupDataExists()
    {
        return StateContainer.ChatGroupsForUser.ContainsKey(ChatGroupUuid);
    }

    private async Task Send(Guid chatGroupUuid)
    {
        ChatMessageDTO chatMessage = new ChatMessageDTO
        {
            UserUuid = StateContainer.CurrentUser.Uuid,
            ChatGroupUuid = chatGroupUuid,
            Message = messageInput
        };
        await StateContainer.SendMessage(chatMessage);
        messageInput = "";
    }

    public void Dispose()
    {
        StateContainer.OnChange -= StateHasChanged;
    }
}