// <auto-generated />
using System;
using LyteChat.Server.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LyteChat.Server.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210103012704_test")]
    partial class test
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("LyteChat.Server.Data.Models.ChatGroup", b =>
                {
                    b.Property<long>("ChatGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("ChatGroupName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ChatGroupId");

                    b.ToTable("ChatGroups");

                    b.HasData(
                        new
                        {
                            ChatGroupId = 1L,
                            ChatGroupName = "All Chat",
                            Uuid = new Guid("e988cf25-0bc0-4ce2-8f71-4fbf7157c619")
                        },
                        new
                        {
                            ChatGroupId = 2L,
                            ChatGroupName = "second chat group",
                            Uuid = new Guid("2f3c3d86-4210-4303-97b4-d64a2c68bf48")
                        },
                        new
                        {
                            ChatGroupId = 3L,
                            ChatGroupName = "third chat group",
                            Uuid = new Guid("840b0779-68f6-4f98-8d8b-2ac95f7a3cd3")
                        });
                });

            modelBuilder.Entity("LyteChat.Server.Data.Models.ChatGroupUser", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("ChatGroupId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "ChatGroupId");

                    b.HasIndex("ChatGroupId");

                    b.ToTable("ChatGroupUsers");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("a0c98efb-9dc0-4e95-8187-87f64c51d9c4"),
                            ChatGroupId = 1L,
                            Uuid = new Guid("bc1b0ebb-0da6-406e-9bba-5077c2c110aa")
                        },
                        new
                        {
                            UserId = new Guid("a0c98efb-9dc0-4e95-8187-87f64c51d9c4"),
                            ChatGroupId = 2L,
                            Uuid = new Guid("83f245a2-c6ab-4c88-a8f8-99ab1eb84430")
                        },
                        new
                        {
                            UserId = new Guid("a0c98efb-9dc0-4e95-8187-87f64c51d9c4"),
                            ChatGroupId = 3L,
                            Uuid = new Guid("0df39c04-509b-4f76-bfd7-e637c1cc5c6e")
                        },
                        new
                        {
                            UserId = new Guid("069dc76d-dbab-46f2-8687-322b5afe4c52"),
                            ChatGroupId = 1L,
                            Uuid = new Guid("0493ca84-7146-4aa0-be05-fb18f7eb1566")
                        },
                        new
                        {
                            UserId = new Guid("069dc76d-dbab-46f2-8687-322b5afe4c52"),
                            ChatGroupId = 2L,
                            Uuid = new Guid("5e590794-be40-466c-a65f-0ffa919abb80")
                        },
                        new
                        {
                            UserId = new Guid("2e03026f-8bc3-4a25-9e30-fa9ee17e9d75"),
                            ChatGroupId = 1L,
                            Uuid = new Guid("9638eede-4c1c-4d44-8aa5-07b01566bf8d")
                        });
                });

            modelBuilder.Entity("LyteChat.Server.Data.Models.ChatMessage", b =>
                {
                    b.Property<long>("ChatMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("ChatGroupId")
                        .HasColumnType("bigint");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ChatMessageId");

                    b.HasIndex("ChatGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("ChatMessages");

                    b.HasData(
                        new
                        {
                            ChatMessageId = 1L,
                            ChatGroupId = 1L,
                            Message = "first message",
                            UserId = new Guid("a0c98efb-9dc0-4e95-8187-87f64c51d9c4"),
                            Uuid = new Guid("659142f2-493e-46dd-bf3f-7b2337a22466")
                        },
                        new
                        {
                            ChatMessageId = 2L,
                            ChatGroupId = 2L,
                            Message = "second message",
                            UserId = new Guid("069dc76d-dbab-46f2-8687-322b5afe4c52"),
                            Uuid = new Guid("60c2e324-985e-4476-9661-fca7f9aa18b7")
                        });
                });

            modelBuilder.Entity("LyteChat.Server.Data.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5668b01e-8f9c-41ec-831d-8a0e76575f91"),
                            ConcurrencyStamp = "26587d7b-4702-4ba2-8126-4bc051ad7461",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = new Guid("7e741158-e699-42ca-b7b0-09f292064e0f"),
                            ConcurrencyStamp = "a3e32fdb-33e1-45c3-bbfb-dd4f282e0f80",
                            Name = "Visitor",
                            NormalizedName = "VISITOR"
                        },
                        new
                        {
                            Id = new Guid("27d35ef3-c7ff-4fbc-b636-aec6324e48a3"),
                            ConcurrencyStamp = "8659adfb-8907-44f4-a9f7-b10e139f07aa",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("LyteChat.Server.Data.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a0c98efb-9dc0-4e95-8187-87f64c51d9c4"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "51b1ad94-2980-4f38-8afe-2e54a3067b46",
                            Email = "admin@email.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEH251H0O8g/CdDCTCcHLn2RfUPXwf5JndNq/9c5G/ySnTIZy9TkK/dhT5LHcZq5d7w==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = new Guid("069dc76d-dbab-46f2-8687-322b5afe4c52"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "add70532-d63d-42b9-90ee-1efcd7e4c55d",
                            Email = "anonymous@email.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEMd/FIS/APpabN/QQFP5iT9yecxIzzfFveeA9olQ5lT1uHKr2FJP0OLC5ej42oe/yw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Anonymous"
                        },
                        new
                        {
                            Id = new Guid("2e03026f-8bc3-4a25-9e30-fa9ee17e9d75"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "255f0551-d8f4-47c6-82eb-82e26cb5f54f",
                            Email = "bob@email.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEOWci0cn6Pzh9PTwZkaGO/9YcwBy2881dd56g4EQzbhRS8kRb6A9kHmo4BG93nHb1w==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Bob"
                        },
                        new
                        {
                            Id = new Guid("dfe84360-9624-47cf-aab9-d9e19297a80b"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a5fe6bbd-1b55-4dd4-89d9-3d687379cc26",
                            Email = "carson@email.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEKFX2jQYPa0k9Uk1wNDFw76oltext13BatQ//hFp9x546VtN4BBzCeADVy5jUPL62A==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Carson"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("a0c98efb-9dc0-4e95-8187-87f64c51d9c4"),
                            RoleId = new Guid("5668b01e-8f9c-41ec-831d-8a0e76575f91")
                        },
                        new
                        {
                            UserId = new Guid("2e03026f-8bc3-4a25-9e30-fa9ee17e9d75"),
                            RoleId = new Guid("27d35ef3-c7ff-4fbc-b636-aec6324e48a3")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("LyteChat.Server.Data.Models.ChatGroupUser", b =>
                {
                    b.HasOne("LyteChat.Server.Data.Models.ChatGroup", "ChatGroup")
                        .WithMany("ChatGroupUsers")
                        .HasForeignKey("ChatGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LyteChat.Server.Data.Models.User", "User")
                        .WithMany("ChatGroupUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LyteChat.Server.Data.Models.ChatMessage", b =>
                {
                    b.HasOne("LyteChat.Server.Data.Models.ChatGroup", "ChatGroup")
                        .WithMany("Messages")
                        .HasForeignKey("ChatGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LyteChat.Server.Data.Models.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("LyteChat.Server.Data.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("LyteChat.Server.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("LyteChat.Server.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("LyteChat.Server.Data.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LyteChat.Server.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("LyteChat.Server.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LyteChat.Server.Data.Models.ChatGroup", b =>
                {
                    b.Navigation("ChatGroupUsers");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("LyteChat.Server.Data.Models.User", b =>
                {
                    b.Navigation("ChatGroupUsers");

                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
